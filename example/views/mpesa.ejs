<%- contentFor('pageTitle') %>
M-Pesa Payment

<%- contentFor('body') %>
<div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
  <%- include('./partials/title', { title: 'M-Pesa STK Push', description: 'Enter your phone number and amount to pay via M-Pesa' }) %>

  <div id="error" class="hidden bg-red-50 border-l-4 border-red-400 p-4 mb-6">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1-9h2v5H9V9zm0-4h2v2H9V5z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3">
        <p id="errorMessage" class="text-sm text-red-700"></p>
      </div>
    </div>
  </div>

  <div id="success" class="hidden bg-green-50 border-l-4 border-green-400 p-4 mb-6">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3">
        <p id="successMessage" class="text-sm text-green-700"></p>
      </div>
    </div>
  </div>

  <form id="mpesaForm" class="space-y-6">
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
      <div class="relative rounded-md">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <span class="text-gray-500 sm:text-sm">+254</span>
        </div>
        <input
          type="text"
          id="phone"
          name="phone"
          required
          pattern="[7-9][0-9]{8}"
          class="form-input block w-full pl-16 pr-3 py-3 text-base rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white"
          placeholder="7XXXXXXXX"
        >
      </div>
      <p class="mt-1 text-xs text-gray-500">Enter your phone number without country code (e.g., 712345678)</p>
    </div>
    
    <div>
      <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount (KES)</label>
      <div class="relative rounded-md">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <span class="text-gray-500 sm:text-sm">KES</span>
        </div>
        <input
          type="number"
          id="amount"
          name="amount"
          required
          min="1"
          step="any"
          class="form-input block w-full pl-12 pr-3 py-3 text-base rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white"
          placeholder="0.00"
        >
      </div>
      <p class="mt-1 text-xs text-gray-500">Enter a valid amount (minimum 1 KES)</p>
    </div>
    
    <div>
      <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
      <input
        type="text"
        id="description"
        name="description"
        class="form-input block w-full py-3 px-3 text-base rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white"
        placeholder="Enter payment description"
      >
      <p class="mt-1 text-xs text-gray-500">Briefly describe what this payment is for</p>
    </div>
    
    <div>
      <button
        type="submit"
        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
      >
        <span id="submitText">Request Payment</span>
        <span id="loadingSpinner" class="hidden ml-2">
          <svg class="animate-spin -ml-1 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>
  </form>
  
  <div id="statusSection" class="hidden mt-8 border-t pt-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Payment Status</h3>
    <div id="statusDetails" class="bg-gray-50 p-4 rounded-md">
      <p class="text-sm text-gray-600">Transaction reference: <span id="transactionReference" class="font-medium text-gray-900"></span></p>
      <p class="text-sm text-gray-600 mt-2">Status: <span id="transactionStatus" class="font-medium"></span></p>
      <p class="text-sm text-gray-600 mt-2">Last checked: <span id="lastChecked" class="font-medium text-gray-900"></span></p>
    </div>
    <button 
      id="checkStatusButton" 
      class="mt-4 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    >
      Check Status
    </button>
  </div>
</div>

<%- contentFor('scripts') %>
<script>
  let transactionRef = null;
  let statusCheckInterval = null;
  
  document.getElementById('mpesaForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const phone = document.getElementById('phone').value;
    const amount = document.getElementById('amount').value;
    const description = document.getElementById('description').value || 'Payment';
    const errorDiv = document.getElementById('error');
    const successDiv = document.getElementById('success');
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    const submitText = document.getElementById('submitText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const statusSection = document.getElementById('statusSection');

    // Hide any previous messages
    errorDiv.classList.add('hidden');
    successDiv.classList.add('hidden');

    // Validate input
    if (!phone.match(/^[7-9][0-9]{8}$/)) {
      errorMessage.textContent = 'Please enter a valid phone number (e.g., 712345678)';
      errorDiv.classList.remove('hidden');
      return;
    }

    if (!amount || amount <= 0) {
      errorMessage.textContent = 'Please enter a valid amount';
      errorDiv.classList.remove('hidden');
      return;
    }

    // Show loading state
    submitText.textContent = 'Processing...';
    loadingSpinner.classList.remove('hidden');

    try {
      // Format phone number with country code
      const formattedPhone = `+254${phone}`;
      
      const response = await fetch('/api/mpesa/stk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phone: formattedPhone, amount, description }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        // Show success message
        successMessage.textContent = 'STK Push sent! Check your phone for the M-Pesa prompt.';
        successDiv.classList.remove('hidden');
        
        // Store the transaction reference
        transactionRef = data.data.reference;
        document.getElementById('transactionReference').textContent = transactionRef;
        document.getElementById('transactionStatus').textContent = 'Pending';
        document.getElementById('transactionStatus').className = 'font-medium text-yellow-600';
        document.getElementById('lastChecked').textContent = new Date().toLocaleTimeString();
        
        // Show status section
        statusSection.classList.remove('hidden');
        
        // Start checking status automatically
        checkStatus();
        statusCheckInterval = setInterval(checkStatus, 5000);
        
        // After 60 seconds, stop automatic checking
        setTimeout(() => {
          if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
            statusCheckInterval = null;
          }
        }, 60000);
      } else {
        errorMessage.textContent = data.message || 'Failed to initiate M-Pesa payment';
        errorDiv.classList.remove('hidden');
      }
    } catch (error) {
      console.error('Error:', error);
      errorMessage.textContent = 'An error occurred while processing your request';
      errorDiv.classList.remove('hidden');
    } finally {
      // Reset button
      submitText.textContent = 'Request Payment';
      loadingSpinner.classList.add('hidden');
    }
  });
  
  document.getElementById('checkStatusButton').addEventListener('click', checkStatus);
  
  async function checkStatus() {
    if (!transactionRef) return;
    
    try {
      const response = await fetch(`/api/mpesa/status/${transactionRef}`);
      const data = await response.json();
      
      if (data.success) {
        const status = data.data.status;
        const statusElement = document.getElementById('transactionStatus');
        document.getElementById('lastChecked').textContent = new Date().toLocaleTimeString();
        
        statusElement.textContent = status;
        
        if (status === 'COMPLETED' || status === 'SUCCESS') {
          statusElement.className = 'font-medium text-green-600';
          
          // Stop automatic checking if payment is complete
          if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
            statusCheckInterval = null;
          }
        } else if (status === 'FAILED' || status === 'CANCELLED') {
          statusElement.className = 'font-medium text-red-600';
          
          // Stop automatic checking if payment has failed
          if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
            statusCheckInterval = null;
          }
        } else {
          statusElement.className = 'font-medium text-yellow-600';
        }
      }
    } catch (error) {
      console.error('Error checking status:', error);
    }
  }
</script>